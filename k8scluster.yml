---
- hosts: master
  become: yes
  tasks:
    - name: Install ContainerD
      apt:
        name:  containerd
        state: present
        update_cache: true

    - name: enable IPv4 forwarding
      shell: |
         sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf
         sysctl -p

    - name: Download Releasekey  
      become: yes
      shell: "curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg --yes"
      register: key
    - debug:
         msg:
           - "{{ key.stdout }}"

    - name: echo to sources list
      become: yes
      shell: "echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list"
      register: list
    - debug:
         msg:
           - "{{ list.stdout }}"

    - name: Install kubeadm, kubelet, and kubectl
      apt:
        name: "{{ item }}"
        state: present
        update_cache: true
      loop:
        - kubeadm
        - kubelet
        - kubectl
        

    - name: Initialize Kubernetes master
      command: kubeadm init --pod-network-cidr=10.244.0.0/16
      register: kubeadm_output
      ignore_errors: yes

    - name: Set up kubectl for the current user
      become: no
      command: "{{ item }}"
      with_items:
          - "sudo mkdir -p $HOME/.kube"
          - "sudo cp /etc/kubernetes/admin.conf $HOME/.kube/config"
          # - "sudo chown $(id -u):$(id -g) $HOME/.kube/config"
          - "sudo chown -R $USER $HOME/.kube"
      #    - name: Set up kubeconfig for kubectl
      #      shell: |
      #        mkdir -p $HOME/.kube
      #        cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
        #chown $(id -u):$(id -g) $HOME/.kube/config

            #- name: kubeconfig file perm
            #become: yes
            #become_method: sudo
            #file:
            #path: $HOME/.kube/config
            #owner: "{{ ansible_effective_user_id }}"
            #group: "{{ ansible_effective_group_id }}"

    - name: Install Calico network plugin
      become: no
      shell: "kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml"
      #when: "'calico' in kubeadm_output.stdout"

    - name: Command for workers to join
      shell: "kubeadm token create --print-join-command > /etc/joincluster"
      register: joincmd
    - debug:
         msg:
           - "{{ joincmd.stdout }}"
    - set_fact:
         join = "{{ joincmd.stdout }}"   

    - name: read file into var
      shell: "cat /etc/joincluster"
      register: joincluster
    - debug:
        msg:
          - "{{ joincluster }}"

    - name: Create join file
      file:
          path: "/etc/joincluster"
          state: touch
      delegate_to: localhost

    - name: add contents to file
      copy:
          dest: "/etc/joincluster"
          content: |
            {{ joincluster.stdout }}                        
      delegate_to: localhost


- hosts: workers
  become: yes
  tasks:
    - name: Install ContainerD
      apt:
        name: containerd
        state: present
        update_cache: true

    - name: enable IPv4 forwarding
      shell: |    
         sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf
         sysctl -p

    - name: Download Releasekey
      become: yes
      shell: "curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg --yes"
      register: key
    - debug:
         msg:
           - "{{ key.stdout }}"

    - name: echo to sources list
      become: yes
      shell: "echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list"
      register: list
    - debug:
         msg:
           - "{{ list.stdout }}"


    - name: Install kubeadm, kubelet, and kubectl
      apt:
        name: "{{ item }}"
        state: present
        update_cache: true
      loop:
        - kubeadm
        - kubelet
        - kubectl

    
    - name: Load join command
      delegate_to: localhost
      command: cat /etc/joincluster
      register: command_output
    - set_fact:
       joincluster = "{{ command_output.stdout }}"
    - debug:
        msg: 
         - "{{ command_output.stdout }}"


    - name: Add to cluster
      become: yes
      command: "{{ command_output.stdout }}"
      register: join_result
    - set_fact:     
       joinresult = "{{ join_result.stdout }}"
    - debug:
          msg: 
          - "{{ join_result.stdout }}"
